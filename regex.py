import re
#----------------------------------------------------------------------------------------------------------------------

#Проверить хайку ли предствленная строка. Для упрощения будем считать кол-во слогов по кол-ву гласных. В хайку должно
# 3 строки и 5\7\5 слогов соответственно в 1,2,3 строках.

s = '''Вечер за окном. / Еще один день прожит. / Жизнь скоротечна...'''
s1 = "Просто текст"
s2 = "Как вишня расцвела! / Она с коня согнала / И князя-гордеца."
s3 = "На голой ветке / Ворон сидит одиноко… / Осенний вечер!"
s4 = "Тихо, тихо ползи, / Улитка, по склону Фудзи, / Вверх, до самых высот!"
s5 = "Жизнь скоротечна… / Думает ли об этом / Маленький мальчик."

def is_haiku(s: str):

    m1 = re.split(r' / ', s)
    if len(m1) != 3:
        return print("Isn't haiku. It must be 3 lines")

    for line_num in (0, 1, 2):
        m2 = re.findall(r'[ёуеыаоэяию]', m1[line_num], flags=re.I)
        if len(m2) != (5 if line_num%2 == 0 else 7):
            return print(f'Isn\'t haiku. Line {line_num+1} has '
                         f'{len(m2)} syllables instead of {"5" if line_num%2 == 0 else "7"}')

    return print("It is haiku!")

# It is haiku!
# Isn't haiku. It must be 3 lines
# Isn't haiku. Line 1 has 6 syllables instead of 5
# Isn't haiku. Line 2 has 8 syllables instead of 7
# Isn't haiku. Line 1 has 6 syllables instead of 5
# It is haiku!



# ---------------------------------------------------------------------------------------------------------------------

#CamelCase ------>  snake_case

st1 = "MyVar17 = OtherVar + YetAnother2Var"

def camel_case(s: str):
    return f'_{s[0].lower()}'

print((re.sub(r'(?<=[a-z])[A-Z]', camel_case, st1)).lower())

#my_var17 = other_var + yet_another2var


#----------------------------------------------------------------------------------------------------------------------

#Разрядность с помощью ","

stk = """12 мало 
лучше 123 
1234 почти 
12354 хорошо 
стало 123456 
супер 1234567"""

print(re.sub(r'([\d])(?=([\d]{3})+(?!\d))', r'\1,', stk))

# 12 мало
# лучше 123
# 1,234 почти
# 12,354 хорошо
# стало 123,456
# супер 1,234,567


#----------------------------------------------------------------------------------------------------------------------

#Вовочка подготовил одно очень важное письмо, но везде указал неправильное время.
#Поэтому нужно заменить все вхождения времени на строку (TBD). Время — это строка вида HH:MM:SS или HH:MM,
# в которой HH — число от 00 до 23, а MM и SS — число от 00 до 59.

sss = """Уважаемые! Если вы к 09:00 не вернёте 
чемодан, то уже в 09:00:01 я за себя не отвечаю. 
PS. С отношением 25:50 всё нормально!"""

print(re.sub(r'(?:[01][0-9]|[2][0-4])(?::[0-5][0-9]){1,2}', '(TBD)', sss))

#Уважаемые! Если вы к (TBD) не вернёте
#чемодан, то уже в (TBD) я за себя не отвечаю.
#PS. С отношением 25:50 всё нормально!


#----------------------------------------------------------------------------------------------------------------------


# Владимир устроился на работу в одно очень важное место. И в первом же документе он ничего не понял,
# там были сплошные ФГУП НИЦ ГИДГЕО, ФГОУ ЧШУ АПК и т.п. Тогда он решил собрать все аббревиатуры, чтобы потом найти их
# расшифровки на http://sokr.ru/. Помогите ему.
# Будем считать аббревиатурой слова только лишь из заглавных букв (как минимум из двух). Если несколько таких слов
# разделены пробелами, то они считаются одной аббревиатурой.


abr = """Это курс информатики соответствует ФГОС и ПООП, 
это подтверждено ФГУ ФНЦ НИИСИ РАН"""

print(re.findall(r'(?:[А-Я]{2,}[\s]?)+', abr))

#['ФГОС ', 'ПООП', 'ФГУ ФНЦ НИИСИ РАН']


#----------------------------------------------------------------------------------------------------------------------

#Владимиру потребовалось срочно запутать финансовую документацию. Но так, чтобы это было обратимо.
#Он не придумал ничего лучше, чем заменить каждое целое число (последовательность цифр) на его куб. Помогите ему.


txt = """Было закуплено 12 единиц техники 
по 410.37 рублей."""

def kybed(m) -> str:
    return str(int(m[0]) ** 3)

match = re.sub(r'(\d+)', kybed, txt)
print(match)

#Было закуплено 1728 единиц техники
#по 68921000.50653 рублей.
